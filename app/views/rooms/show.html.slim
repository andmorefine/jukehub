div#main
  = render partial: "/rooms/youtube_search"
  nav.navbar.navbar-dark.bg-primary
    div.container-fluid
      div.collapse.navbar-toggleable-xs
        a.navbar-brand = @room.screen_name
        div.form-inline.pull-xs-left
          input#search_query.form-control v-on:keydown.enter="aho" type="text" size='50%' placeholder="Search"
        ul.nav.navbar-nav.nav-flex-icons
          li.nav-item.avatar.active.dropdown
            = link_to 'MyPage', "#{ENV["APP_HOSTNAME"]}/users/#{current_user.id}"

  div.container-fluid
    br
    div.row
      div.col-xs-8
        iframe#video-viewer width="100%" height="400px" src="https://www.youtube.com/embed/ZWdMi2Cfp70" frameborder="0" allowfullscreen
        div.card.card-block
          div.row
            div.col-xs-2
              img.img-circle.img-responsive src="http://mdbootstrap.com/wp-content/uploads/2015/10/avatar-2.jpg"
            div.col-xs-8
              h4#now_playing_title.card-title
              p#now_playing_user
            div.col-xs-2
              span
                span#like_count 0
                span いいね
              button.btn.btn-floating.btn-small.blue v-on:click="like"
                i.fa.fa-gratipay
        div.card.card-block
          div.md-form.form-group
            input#comment value="#{@comment}" type='text' v-on:keydown.enter="comment"
          hr
          table
            tbody
              | <template v-for="comment in comments">
              |   <tr>
              |     <td>{{comment.user_id}}</td>
              |     <td>{{comment.body}}</td>
              |   </tr>
              | </template>
      div.col-xs-4
        div.card.card-block
          div.md-form
            input#url.form-control v-on:keydown.enter="add" value="#{@q}" type='text' placeholder="https://www.youtube.com/watch?v=ZWdMi2Cfp70"
        div
          | <template v-for="queue in queues">
          |   <div class='card card-block' v-if="queue.state == 0">
          |     <div class='row'>
          |       <div class='col-xs-2'>
          |         <img v-bind:src='queue.image_url' height='100%' width='100%'>
          |       </div>
          |       <div class='col-xs-10'>
          |         <h5 class='card-title'>{{queue.title}}</h4>
          |         <p class='pull-xs-right'>{{queue.user.name}} / {{queue.duration}}秒</p>
          |       </div>
          |     </div>
          |   </div>
          |   <div class='card card-block card-success white-text' v-if="queue.state == 1">
          |     <div class='row'>
          |       <div class='col-xs-2'>
          |         <img v-bind:src='queue.image_url' height='100%' width='100%'>
          |       </div>
          |       <div class='col-xs-10'>
          |         <h5 class='card-title'>{{queue.title}}</h4>
          |         <p class='pull-xs-right'>{{queue.user.name}} / {{queue.duration}}秒</p>
          |       </div>
          |     </div>
          |   </div>
          |   <div class='card card-block card-danger white-text' v-if="queue.state == 2">
          |     <div class='row'>
          |       <div class='col-xs-2'>
          |         <img v-bind:src='queue.image_url' height='100%' width='100%'>
          |       </div>
          |       <div class='col-xs-10'>
          |         <h5 class='card-title'>{{queue.title}}</h4>
          |         <p class='pull-xs-right'>{{queue.user.name}} / {{queue.duration}}秒</p>
          |       </div>
          |     </div>
          |   </div>
          | </template>

javascript:
  if (Notification.permission === 'default') {
    Notification.requestPermission(function(result) {});
  }
  var v = new Vue({
    el: '#main',
    data: {
      search_results: [],
      queues: [],
      comments: [],
      now_playing: 0,
    },
    methods: {
      add: function (event) {
        var self = this;
        var url = $('#url').val();
        $.ajax({
          type: 'POST',
          url: '/api/rooms/1/queues',
          data: { url: url },
          success: function() {
            $('#url').val('');
            self.fetch_videos();
          }
        });
      },
      fetch_videos: function() {
        var self = this;
        $.ajax({
          type: 'GET',
          url: '/api/rooms/1/queues',
          success: function (data, status, request) {
            self.queues = [];
            for (var i = 0; i < data.length; i++) {
              self.queues.push(data[i]);
            }
          },
        }).error(function (data, status, request) {})
      },
      get_video: function(callback) {
        $.ajax({
          type: 'GET',
          url: '/api/rooms/1/queues/playing',
          success: function(res) {
            if (res) {
              $('#now_playing_title').text(res.video.title);
              $('#now_playing_user').text(res.user.email);
              callback({ id: res.video.provider_video_id, title: res.video.title, user: res.user });
            } else {
              callback(false);
            }
          },
        })
      },
      play: function(video_id) {
        var url = 'https://www.youtube.com/embed/' + video_id;
        $('#video-viewer').attr('src', url + '?autoplay=1');
      },
      like: function() {
        var self = this;
        $.ajax({
          type: 'POST',
          url: '/api/rooms/1/reactions',
          data: { type: 'like' },
          success: function() {
            self.fetch_reactions();
          }
        });
      },
      fetch_reactions: function() {
        $.ajax({
          type: 'GET',
          url: '/api/rooms/1/reactions',
          success: function(res) {
            $('#like_count').text(res.like);
          }
        });
      },
      force_stop: function(e, a, b) {
        var self = this;
        $.ajax({
          type: 'DELETE',
          url: '/api/rooms/1/queues/' + e.target.id,
          success: function(res) {
            self.fetch_videos();
          }
        });
      },
      watch: function() {
        var self = this;
        this.fetch_reactions();
        this.get_video(function(video) {
          if (video && (self.now_playing != video.id)) {
            self.now_playing = video.id;
            self.play(video.id);
            var n = new Notification(video.title + "\n" + video.user.email);
            setTimeout(function() {
              n.close();
            }, 3 * 1000);
          }
          self.fetch_videos();
          self.fetch_comments();
          setTimeout(function() {
            self.watch();
          }, 30 * 1000);
        });
      },
      comment: function() {
        console.log('test');
        var self = this;
        var comment = $('#comment').val();
        $.ajax({
          type: 'POST',
          url: '/api/rooms/1/comments',
          data: { comment: comment },
          success: function() {
            $('#comment').val('');
            self.fetch_comments();
          }
        });
      },
      fetch_comments: function() {
        var self = this;
        $.ajax({
          type: 'GET',
          url: '/api/rooms/1/comments',
          success: function (data, status, request) {
            self.comments = [];
            for (var i = 0; i < data.length; i++) {
              self.comments.push(data[i]);
            }
          },
        });
      },
      aho: function() {
        var self = this;
        var query = $('#search_query').val();
        $.ajax({
          type: 'GET',
          url: '/api/search',
          data: { query: query },
          success: function (data, status, request) {
            self.search_results = [];
            for (var i = 0; i < data.result.length; i++) {
              self.search_results.push(data.result[i]);
            }
            $('#search_query_title').text(query);
            $('#search_result').modal();
          },
        });
      },
      add_video_from_result: function (event) {
        var self = this;
        var url = "https://www.youtube.com/watch?v=" + event.target.id;
        $.ajax({
          type: 'POST',
          url: '/api/rooms/1/queues',
          data: { url: url },
          success: function() {
            self.fetch_videos();
            $('#search_result').modal('hide');
          }
        });
      },
    }
  })
  v.watch();
